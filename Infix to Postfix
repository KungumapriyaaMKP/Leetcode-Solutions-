#include<stack>
class Solution {
  public:
  
  int precedence(char c)
  {
      if(c == '^') return 3;
      else if(c == '*' || c == '/') return 2;
      else if (c == '+' || c == '-') return 1;
      else return 0;
  }
    string infixToPostfix(string& s) {
        // code here
        string res = "";
        stack<char>st;
        int n = s.size();
        for(int i=0; i<n; i++)
        {
        if(s[i] == ' ') continue;
        
        else if(isalpha(s[i]))
        {
            res += s[i];
        }
        else if(isdigit(s[i]))
        {
            while(i < n && isdigit(s[i]))
            {
                res += s[i];
                i++;
            }
            res += ' ';
            i--;
        }
        
        else if(s[i] == '(') st.push(s[i]);
        
        else if(s[i] == ')')
        {
            while(!st.empty() && st.top()!= '(')
            {
                res+=st.top();
                st.pop();
            }
            if(!st.empty()) st.pop();
        }
    else 
    {
        while(!st.empty() && precedence(st.top()) >= precedence(s[i]))
        {
        res += st.top();
        st.pop();
        }
        st.push(s[i]);
    }
        }
    while(!st.empty())
    {
        res+=st.top();
        st.pop();
    }
        return res;
    }
};
